# -*- cperl -*-
#
# MTY::MakeAnalyzer::Log
#
# Format the log produced by 'make -d' as a printable tree:
# 
# Copyright 2003-2015 Matt T. Yourst <yourst@yourst.com>. All rights reserved.
#

package MTY::MakeAnalyzer::Log;

use integer; use warnings; use Exporter qw(import);

our @EXPORT = # (auto-generated by perl-mod-deps)
  qw(print_formatted_make_log);

use MTY::System::POSIX;
use MTY::Common::Common;
use MTY::Common::Hashes;
use MTY::Common::Strings;
use MTY::Filesystem::Files;
use MTY::RegExp::Define;
use MTY::RegExp::Tools;
use MTY::RegExp::FilesAndPaths;
use MTY::Display::Colorize;
use MTY::Display::PrintableSymbols;
use MTY::Display::PrintableSymbolTools;
use MTY::Display::TextInABox;
use MTY::Display::Tree;
use MTY::Display::TreeBuilder;

use MTY::MakeAnalyzer::Common;
#pragma end_of_includes

sub print_formatted_make_log($;$) {
  my ($text, $fd) = @_;

  $fd //= STDOUT;

  my $lq = $K.left_quote;
  my $rq = $K.right_quote;

  my $lines_to_exclude = qr{
   \QLooking for an implicit rule\E |
   \QNo implicit rule found\E |
   \QFinished prerequisites of\E |
   \QNo need to remake\E |
   \QPruning\E
  }oax;

  #$text =~ s/\QNo need to remake target\E/  No need to remake target/oamsxg;

  my ($lines, $indents) = split_text_into_arrays_of_lines_and_indents($text);

  my $looking_for_start_of_log = 1;

  foreach my $line (@$lines) {
    if ($looking_for_start_of_log) {
      next if ($line !~ /Reading\s+makefile/oax);
      $looking_for_start_of_log = 0;
    }

    if ($line =~ /$lines_to_exclude/oax) {
      $line = undef;
      next;
    }
    
    if (index($line, 'Make data base') > 0) { last; }

    # Clean up the appearance of various elements of each line:
    $line =~ s{['"]\K\.$}{}oaxg;
    $line =~ s{\Q (search path)\E|\Q(no ~ expansion)\E}{}oaxg;
    $line =~ s{^\QReading makefile\E .* \K \s*\Q...\E}{}oaxg;
    $line = format_file_paths_within_string($line);

    my $color = 
      ($line =~ /Reading makefile/oa) ? $M :
      ($line =~ /Considering target/oa) ? $C :
      ($line =~ /No need to remake/oa) ? $G :
      ($line =~ /Must remake/oa) ? $Y :
      ($line =~ /child/oa) ? $B : 
        ($line =~ /^\#/oa) ? $K : $W;
    
    $line =~ s{['"]([^\s'"]+/[^\s'"]+)['"]}{format_file_path($1).$color}oamsxge;
    $line =~ s{['"]([^'"]*)['"]}{$K$lq$Y$1$K$rq}oamsxg;
    $line = $color.$line.$X;
  }

  my $rootnode = labels_and_levels_to_tree($lines, $indents);
  print_tree($rootnode, $fd);
}

1;
