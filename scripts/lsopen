#!/usr/bin/perl -w
# -*- cperl -*-
#
# lls: Enhanced 'ls' for file and directory listings 
#
# Copyright 2003 - 2014 Matt T. Yourst <yourst@yourst.com>
#

use integer; use warnings; 

use MTY::Common::Common;
use MTY::Common::Hashes;
use MTY::Common::Strings;
use MTY::Filesystem::Files;
use MTY::Filesystem::FileStats;
use MTY::Common::CommandLine;

use MTY::System::POSIX;
use MTY::Filesystem::ProcFS;
use MTY::Filesystem::BtrFS;
use MTY::Filesystem::OpenFiles;
use MTY::Filesystem::Mounts;

use MTY::Display::Colorize;
use MTY::Display::ColorizeErrorsAndWarnings;
use MTY::Display::ANSIColorREs;
use MTY::Display::PrintableSymbols;
use MTY::Display::PrintableSymbolTools;
use MTY::Display::Scrollable;
use MTY::Display::TextInABox;
use MTY::Display::Tree;

use MTY::RegExp::Define;
use MTY::RegExp::Tools;
use MTY::RegExp::Numeric;
use MTY::RegExp::Strings;
use MTY::RegExp::Blocks;
use MTY::RegExp::FilesAndPaths;
use MTY::RegExp::Networks;

my %open_type_to_color = (
  OPEN_ON_FD, C,
  OPEN_AS_ROOT_DIR, R,
  OPEN_AS_CURRENT_DIR, M,
  OPEN_AS_EXECUTABLE, G,
  OPEN_FOR_MMAP, Y,
);

my %open_type_to_tree_symbol = (
  OPEN_ON_FD, sharp_sign,
  OPEN_AS_ROOT_DIR, square_root_symbol,
  OPEN_AS_CURRENT_DIR, dot_in_circle,
  OPEN_AS_EXECUTABLE, x_symbol,
  OPEN_FOR_MMAP, dice_5_dots
);

my %file_type_to_symbol = (
  FILE_TYPE_SPECIAL, asterisk,
  FILE_TYPE_FILE, arrow_tri,
  FILE_TYPE_DIR, three_horiz_bars,
  FILE_TYPE_SOCKET, telephone,
  FILE_TYPE_PIPE, long_narrow_vert_bars,
);

my $file_size_color = fg_color_rgb(64, 160, 224);
use constant darkK => fg_color_rgb(96, 96, 96);

# my $directory_color = fg_color_rgb(204, 204, 204);
# my $directory_shaded_color = fg_color_rgb(64, 92, 104);
my $directory_color = fg_color_rgb(72, 180, 255);
my $directory_shaded_color = fg_color_rgb(scale_rgb($directory_color, 0.6));
my $directory_separator_symbol = $directory_shaded_color.large_right_slash.$directory_color;
my $filename_color = fg_color_rgb(255, 240, 0);

sub format_filename($) {
  my ($path) = @_;

  my ($dir, $filename) = split_dir_and_filename($path);
  $dir =~ s{/}{$directory_separator_symbol}oaxg;
  return $directory_color.$dir.$filename_color.$filename.X;
}

sub open_file_list_to_printable_tree(+;$) {
  my ($path_to_open_info) = @_;

  my $tree = [ $B.$U.'Files, directories and special objects currently in use:'.$X ];

  my @pathlist = sort keys %$path_to_open_info;

  my $pid_to_command = MTY::Common::Cache->new(
    sub { my ($this, $pid) = @_; my $comm = read_proc($pid, 'comm') // '???'; chomp $comm; return $comm; });
  my $pid_to_kernel_thread = MTY::Common::Cache->new(
    sub { my ($this, $pid) = @_; return (!length(read_proc($pid, 'cmdline') // '')) ? 1 : 0; });

  foreach my $path (@pathlist) {
    my $info = $path_to_open_info->{$path};
    my $is_deleted = ($path =~ s{ \(deleted\)$}{}oax);

    my ($special_type, $special_inode) = classify_fd_target($path);

    my $is_special = (($special_type == FILE_TYPE_SPECIAL) || 
                      ($special_type == FILE_TYPE_SOCKET) ||
                      ($special_type == FILE_TYPE_PIPE));

    if ($special_type >= FILE_TYPE_MOUNT_POINT) { $special_type = FILE_TYPE_MOUNT_POINT; }
    my $file_node_symbol = $file_type_to_symbol{$special_type} // undef;
    my $file_label = ($is_special) ? R.$file_type_to_description{$special_type}.' '.($special_inode // '').X : format_filename($path).X;
    if ($is_deleted) { $file_label .= R.box_with_right_slash.' (deleted)'; }

    my $file_tree_node = [ [ [ TREE_CMD_SYMBOL, $file_node_symbol ], $file_label ] ];

    my %pid_to_instances = ( );

    foreach my $instance (@$info) {
      my ($open_type, $pid) = @$instance;
      push @{$pid_to_instances{$pid}}, $instance;
    }

    foreach my $pid (sort keys %pid_to_instances) {
      my $instances = $pid_to_instances{$pid};

      my $command = $pid_to_command->get($pid);
      my $is_kernel_thread = $pid_to_kernel_thread->get($pid);

      my $pid_node_icon = arrow_tri; # Y.p_in_circle;

      my $pid_label = (($is_kernel_thread) 
        ? fg_color_rgb(192, 144, 0).'(kernel) '.fg_color_rgb(255, 192, 0)
        : fg_color_rgb(160, 160, 0)).
        Y.padstring($pid, 7).' '.padstring(darkK.'('.G.$command.darkK.')', 15+2).' ';

      my @context_type_count = (0, 0, 0, 0, 0);

      foreach my $instance (@$instances) {
        my ($open_type, $same_as_pid, $is_deleted) = @$instance;
        $context_type_count[$open_type]++;
      }
      
      #
      # Show the root, cwd and exec contexts on the same line as the pid
      # for improved readability and compactness, since these contexts
      # don't have any additional details that must be displayed, and
      # they only occur at most once per pid and path:
      #
      foreach my $open_type (OPEN_AS_ROOT_DIR, OPEN_AS_CURRENT_DIR, OPEN_AS_EXECUTABLE) {
        next if (!$context_type_count[$open_type]);
        my $type_color = $open_type_to_color{$open_type} // G;
        my $instance_symbol = $type_color.($open_type_to_tree_symbol{$open_type} // '???');
        $pid_label .= K.' '.$instance_symbol.' '.$open_type_to_description[$open_type];
      }
      $pid_label .= ' ';

      my $pid_tree_node = [ [ [ TREE_CMD_SYMBOL, $pid_node_icon ], $pid_label ] ];
      push @$file_tree_node, $pid_tree_node;

      foreach my $instance (@$instances) {
        my ($open_type, $pid, $is_deleted, $fd_or_map, $file_type, $full_path) = @$instance;
        next if ((($open_type == OPEN_AS_ROOT_DIR) || ($open_type == OPEN_AS_CURRENT_DIR) || ($open_type == OPEN_AS_EXECUTABLE)) && (!$is_deleted)); 

        my $type_color = $open_type_to_color{$open_type} // G;
        my $instance_symbol = $type_color.($open_type_to_tree_symbol{$open_type} // '???');

        my $instance_label =
          # $K.'pid '.$Y.padstring($pid // '???', -7).$K.': '.
          $type_color.$open_type_to_padded_description[$open_type].
            ($is_deleted ? R.'  '.x_symbol.' (deleted)'.X : '');
        
        if ($open_type == OPEN_ON_FD) {
          $instance_label .= '  '.C.$fd_or_map.K.' ('.M.$file_type_to_description{$file_type}.K.')';
          if (defined $full_path) { $instance_label .= B.' '.dashed_horiz_bar_2_dashes.arrow_barbed.' '.G.$full_path; }
        } elsif ($open_type == OPEN_FOR_MMAP) {
          my ($virtaddr_range, $perms, $offset, $dev, $inode, $mapped_file) = @$fd_or_map;
          my ($virtaddr, $end_virtaddr) = ($virtaddr_range =~ /([^\-]+)\-([^\-]+)/oax);
          use bigint;
          $virtaddr_as_int = hex($virtaddr);
          $end_virtaddr_as_int = hex($end_virtaddr);
          my $map_size = ($end_virtaddr_as_int + 4096) - $virtaddr_as_int;
          
          $instance_label .= '  '.M.sprintf('%12ld', ($map_size / 1024)).K.' kb @ '.
            M.padstring($virtaddr, -12).K.' ('.M.$perms.K.')';
          if ((defined $offset) && ($offset > 0)) 
            { $instance_label .= K.' from offset '.M.'0x'.$offset; }

          no bigint;
          # W_2_3.join(' ', @$fd_or_map);
        }

        push @$pid_tree_node, [ [ [ TREE_CMD_SYMBOL, $instance_symbol ], $instance_label ] ];
      }
    }

    push @$tree, $file_tree_node;
  }

  return $tree;
}

my @show_specific_pids;
my @show_open_types;
my $fast_query = 0;
my $debug = 0;

my %open_type_to_id = (
  'fd' => OPEN_TYPE_FD,
  'root' => OPEN_TYPE_ROOT_DIR,
  'rootdir' => OPEN_TYPE_ROOT_DIR,
  'cwd' => OPEN_TYPE_CURRENT_DIR,
  'cd' => OPEN_TYPE_CURRENT_DIR,
  'dir' => OPEN_TYPE_CURRENT_DIR,
  'exe' => OPEN_TYPE_EXECUTABLE,
  'exec' => OPEN_TYPE_EXECUTABLE,
  'bin' => OPEN_TYPE_EXECUTABLE,
  'map' => OPEN_TYPE_MMAP,
  'mmap' => OPEN_TYPE_MMAP,
  'mm' => OPEN_TYPE_MMAP,
);

my %command_line_options = (
  'p' => [ \@show_specific_pids, OPTION_VALUE_REQUIRED|OPTION_APPEND_REPEATS|OPTION_COMMA_SEP_LISTS, [ 'pid', 'pids' ] ],
  't' => [ \@show_open_types, OPTION_VALUE_REQUIRED|OPTION_APPEND_REPEATS|OPTION_COMMA_SEP_LISTS, [ 'type', 'types', 'opentypes' ], %open_type_to_id ],
  'f' => [ \$fast_query, 0, [ 'fast', 'skip-details', 'no-details' ] ],
  'd' => [ \$debug, 0, [ 'debug', 'dump' ] ],
);

my ($pathargs, $invalid_option_indexes) =
  parse_and_check_command_line(%command_line_options);

my $pidlist = (sizeof(@show_specific_pids) > 0) ? \@show_specific_pids : undef;

if (defined $pidlist) {
  my $expanded_pidlist = [ ];
  my @command_names = ( );
  foreach my $pid_or_name (@$pidlist) {
    if ($pid_or_name =~ /^[0-9]+$/oax) {
      push @$expanded_pidlist, $pid_or_name;
    } else {
      push @command_names, $pid_or_name;
    }
  }

  foreach my $command_name (@command_names) {
    push @$expanded_pidlist, get_pids_by_name($command_name);
  }

  $pidlist = $expanded_pidlist;
}

my $open_files = ($fast_query) ? find_all_open_files_fast_skip_details($pidlist) : find_all_open_files($pidlist);

if ($debug) {
  use DDP; 
  print(STDOUT p($open_files));
}

if (sizeof($pathargs) > 0) { $open_files = slice_of_hash($open_files, $pathargs); }

my $printable_tree_of_open_files = open_file_list_to_printable_tree($open_files);

print_tree($printable_tree_of_open_files);

#my @list_of_open_files = sort keys %$open_files;
#print(join(NL, @list_of_open_files));
