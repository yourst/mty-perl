#!/usr/bin/perl -w
# -*- cperl -*-
#
# test-command-line: test suite for the MTY::Common::CommandLine package
#

use integer;
use warnings;

use MTY::Common::Common;
use MTY::Common::Hashes;
use MTY::Common::Strings;
use MTY::Filesystem::Files;
use MTY::Display::Colorize;
use MTY::Display::ColorizeErrorsAndWarnings;
use MTY::Display::PrintableSymbolTools;
use MTY::Display::PrintableSymbols;
use MTY::Display::DataStructures;
use MTY::Common::CommandLine;
use Data::Dumper;
use Data::Printer;

# Modes of operation:
my $bool_option_1 = 0;
my $bool_option_2 = 1;
my $bool_option_3 = 0;
my $option_4 = 0;
my $option_5 = 0;
my $required_scalar_4 = 'default4';
my $required_scalar_5 = 'default5';
my $optional_scalar_6 = 'default6';
my $optional_scalar_7 = 'default7';
my @required_list_8 = ( 'default8[0]', 'default8[1]' );
my @required_list_9 = ( 'default9[0]', 'default9[1]' );
my @required_list_10 = ( 'default10[0]', 'default10[1]' );
my %hash_11 = ( 'default11[key0]' => 'default11[value0]' );
my $required_sub_12 = 'default12';
my $comb_w = 0;
my $comb_x = 0;
my $comb_y = 0;
my $comb_z = 0;
my @nosep1 = ( );

my %command_line_options = (
  'bool1' => [ \$bool_option_1, 0, ['b1', 'b1alt'] ],
  'bool2' => [ \$bool_option_2, OPTION_TOGGLE_BOOL, 'b2' ],
  'bool3' => \$bool_option_3,
  'option4' => [ \$option_4, 'o4', ],
  'option5' => [ \$option_5, [ 'o5', 'op5' ] ],
  'req4' => [ \$required_scalar_4, OPTION_VALUE_REQUIRED, 'r4', 99999, 11111 ],
  'req5' => [ \$required_scalar_5, OPTION_VALUE_REQUIRED | OPTION_APPEND_REPEATS ],
  'opt6' => [ \$optional_scalar_6, OPTION_VALUE_OPTIONAL, 'o6' ],
  'opt7' => [ \$optional_scalar_7, OPTION_VALUE_OPTIONAL ],
  'reqlist8' => [ \@required_list_8, OPTION_VALUE_REQUIRED, 'rl8' ],
  'reqlist9' => [ \@required_list_9, OPTION_VALUE_REQUIRED ],
  'reqlist10' => [ \@required_list_10, OPTION_VALUE_REQUIRED ],
  'hash11'   => [ \%hash_11, OPTION_VALUE_REQUIRED, 'h11' ],
  'reqsub12' => [ sub {
                     print(STDERR 'Handler for reqsub12 called: args = ('.join(', ', @_).')'.NL);
                     $required_sub_12 = '<value='.$_[0].'>';
                   }, OPTION_VALUE_REQUIRED, 'rs12' ],
  'comb-w' => [ \$comb_w, OPTION_SINGLE_CHAR_COMBINABLE, 'w' ],
  'comb-x' => [ \$comb_x, OPTION_SINGLE_CHAR_COMBINABLE, [ 'xopt', 'x' ] ],
  'comb-y' => [ \$comb_y, OPTION_SINGLE_CHAR_COMBINABLE, [ 'y', 'why' ] ],
  'comb-z' => [ \$comb_z, OPTION_SINGLE_CHAR_COMBINABLE, [ 'zorro', 'z' ] ],
  'nosep1' => [ \@nosep1, OPTION_NO_SEPARATOR_BEFORE_VALUE | OPTION_VALUE_REQUIRED | OPTION_APPEND_REPEATS, [ 'I' ] ],
);

my $argstring = '-b1 -no-b2 -bool3 -req4 value4 -req5=5 -opt6 '.
   '-opt7 value7 -reqlist8=a,b,c -reqlist9 alpha:beta,gamma '.
   'filename1 filename2 '.
   '-reqlist10 x,y,z -hash11 key11a=value11a,key11b=value11b '.
   'filename3 -yx -w -zxyw '.
   '-reqsub12=value12 -I/usr/bin/dir1 -I/usr/include/dir2'.
   '-no-o4 -op5';

my @args = split(/\s+/, $argstring);

print_var('args', @args);
#print_var('command_line_options', %command_line_options);
#print(STDOUT p(%command_line_options));

my ($filenames, $invalid_arg_indexes, $option_names_to_values) = 
  parse_and_check_command_line(%command_line_options, @args);

print_var('filenames', @$filenames);
#print_var('invalid_arg_indexes', [ keys %$invalid_arg_indexes ]);
#foreach $i (sort keys %$invalid_arg_indexes) {
#  print($K.' '.dot.' '.$R.$U.'Invalid (#'.$i.'):'.$UX.$Y.' '.$args[$i].$X.NL);
#}

print_var('bool_option_1', $bool_option_1);
print_var('bool_option_2', $bool_option_2);
print_var('bool_option_3', $bool_option_3);
print_var('option4', $option_4);
print_var('option5', $option_5);
print_var('required_scalar_4', $required_scalar_4);
print_var('required_scalar_5', $required_scalar_5);
print_var('optional_scalar_6', $optional_scalar_6);
print_var('optional_scalar_7', $optional_scalar_7);
print_var('required_list_8', @required_list_8);
print_var('required_list_9', @required_list_9);
print_var('required_list_10', @required_list_10);
print_var('hash_11', %hash_11);
print_var('required_sub_12', $required_sub_12);
print_var('w', $comb_w);
print_var('x', $comb_x);
print_var('y', $comb_y);
print_var('z', $comb_z);
print_var('nosep1', @nosep1);

print_var('option_names_to_values', %$option_names_to_values);

print_current_option_settings(%command_line_options, STDOUT);

if (print_invalid_options($invalid_arg_indexes)) { die('Invalid arguments; exiting'); }
