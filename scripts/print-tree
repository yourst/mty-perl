#!/usr/bin/perl -w
# -*- cperl -*-

use MTY::Common::Common;
use MTY::Common::CommandLine;
use MTY::Common::Hashes;
use MTY::Common::Strings;
use MTY::Filesystem::Files;
use MTY::Display::Colorize;
use MTY::Display::ColorizeErrorsAndWarnings;
use MTY::Display::PrintableSymbols;
use MTY::Display::PrintableSymbolTools;
use MTY::Display::Scrollable;
use MTY::Display::TextInABox;
use MTY::Display::Tree;
  
my $input_format = 'auto';
my $path_separator = '/';
my $verbose = 0;

my %command_line_options = (
  'indents' => [ \$input_format, 0, [ 'i' ], 'indents' ],
  'paths' => [ \$input_format, 0, [ 'p' ], 'paths' ],
  'deps' => [ \$input_format, 0, [ 'd' ], 'dependencies' ],
  'sep' => [ \$path_separator, OPTION_VALUE_REQUIRED, [ 's', 'ps', 'pathsep', 'path-sep' ] ],
  'verbose' => [ \$verbose, 0, [ 'v' ] ],
);

my ($lines, $invalid_args) = parse_and_check_command_line(%command_line_options);

my $text = read_file_handle(STDIN_FD);

if ($input_format eq 'auto') {
  $input_format =
    ($text =~ /^ \s+/oamsx) ? 'indents' :
    ($text =~ /^ [^=:]+ [=:]/oamsx) ? 'deps' :
    ($text =~ /(?: \/ | :: | \.)/oamsx) ? 'paths' : undef;

  if (!defined $input_format) {
    die('Cannot automatically identify text input format for printing tree (use -indents, -paths or -deps)');
  }

  if ($verbose) {
    print(STDERR 'print-tree: Auto-detected '.$input_format.' input format'.NL);
  }
}

my $rootnode;

if ($input_format eq 'indents') {
  my ($lines, $indents) = split_text_into_arrays_of_lines_and_indents($text);
  $rootnode = labels_and_levels_to_tree($lines, $indents);
} elsif ($input_format eq 'paths') {
  my $lines = [ split(/\n/oamsx, $text) ];
  my $tree_of_hashes = delimited_paths_to_tree_of_hashes($lines, $path_separator);
  $rootnode = tree_of_hashes_to_printable_tree($tree_of_hashes, 'root');
} elsif ($input_format eq 'deps') {
  my %deps = ( );
  my $deps_re = qr{^ ([^:]++): \s++ (\N++) \n}oamsx;

  while ($text =~ /$deps_re/oamsx) {
    my ($target_list, $prereq_list) = ($1, $2);

    my @targets = split(/\s+/, @$target_list);
    my @prereqs = split(/\s+/, @$prereq_list);

    foreach my $target (@targets) {
      push @{$deps{$target}}, @prereqs;
    }
  }

  use DDP; p %deps;

  foreach $deplist (values %deps) 
    { remove_dups_in_place($deplist); }

  $rootnode = [
    [ 'All Targets' ],
  ];

  foreach $target (sort keys %deps) 
    { push @$rootnode, dependency_graph_to_tree($target, %deps); }
}

print_tree($rootnode, STDOUT);
