#!/usr/bin/perl -w
# -*- cperl -*-
#
# perlsubs: Perl subroutine listing and manipulation utility
#
# Copyright 2015 Matt T. Yourst <yourst@yourst.com>
#
# The perlsubs program:
# 
# - Prints a list of all subroutine definitions found in the specified
#   Perl module or program source file(s)
#
# - Prints the actual code within the specified subroutine(s) in the
#   specified source files
#
# - Moves the specified subroutine(s) between two source files
#

use integer; use warnings;

use MTY::Common::Common;
use MTY::Common::Hashes;
use MTY::Common::Strings;
use MTY::Common::CommandLine;
use MTY::Common::Misc;
use MTY::Filesystem::Files;
use MTY::Filesystem::SearchableDirList;
use MTY::Display::Colorize;
use MTY::Display::ColorCapabilityCheck;
use MTY::Display::ColorizeErrorsAndWarnings;
use MTY::Display::PrintableSymbols;
use MTY::Display::PrintableSymbolTools;
# use MTY::Display::StringFormats;
use MTY::Display::Table;
use MTY::RegExp::PerlSyntax;
use MTY::Common::PerlSourceTools;
use MTY::RegExp::Tools;
use MTY::RegExp::Strings;
use MTY::RegExp::Blocks;
use MTY::RegExp::PerlSyntax;
use MTY::RegExp::Numeric;

my @specified_sub_names;
my $remove_subs = 0;
my $show_as_table = 1;
my $sort_by_name = 0;
my $show_anonymous_subs = 0;
my $colorize_code //= undef;
my $show_token_boundaries = 0;
my $output_separator = NL;

my $show_names = undef;
my $show_prototypes = undef;
my $show_attributes = undef;
my $show_return_types = undef;
my $show_filenames = undef;
my $show_lines = undef;
my $show_args = undef;
my $show_offsets = 0;
my $show_packages = 0;
my $show_code = undef;
my $include_comments_above_subs = 0;
my $verbose = 0;

my %command_line_options = (
  'sub' => [ \@specified_sub_names, OPTION_VALUE_REQUIRED|OPTION_APPEND_REPEATS|OPTION_COMMA_SEP_LISTS, [ qw(s print-sub) ] ],
  'remove' => [ \$remove_subs, 0, [ qw(r d delete without strip) ] ],
  'table' => [ \$show_as_table, 0, [ qw(t) ] ],
  'sort' => [ \$sort_by_name, 0, [ qw(S sort-by-name) ] ],
  'anon' => [ \$show_anonymous_subs, 0, [ qw(anonymous anon-subs) ] ],
  'colorize' => [ \$colorize_code, 0, [ qw(pretty-print pretty pp colorize-code syntax-highlight) ] ],
  'tokens' => [ \$show_token_boundaries, 0, [ qw(show-tokens show-token-boundaries) ] ],
  'sep' => [ \$output_separator, OPTION_VALUE_REQUIRED, [ qw(separator output-separator) ] ],

  'names' => [ \$show_names, 0, [ qw(n sub-names functions funcs) ] ],
  'protos' => [ \$show_prototypes, 0, [ qw(p proto prototypes) ] ],
  'attrs' => [ \$show_attributes, 0, [ qw(a attr attributes) ] ],
  'returns' => [ \$show_return_types, 0, [ qw(ret rt z rets rettypes return-types) ] ],
  'filenames' => [ \$show_filenames, 0, [ qw(f files) ] ],
  'lines' => [ \$show_lines, 0, [ qw(l) ] ],
  'offsets' => [ \$show_offsets, 0, [ qw(o) ] ],
  'packages' => [ \$show_packages, 0, [ qw(q qualified-names packages pkg modules mods) ] ],
  'args' => [ \$show_argument_names, 0, [ qw(g arguments argument-names arg-names parameters params) ] ],
  'code' => [ \$show_code, 0, [ qw(c b body source) ] ],
  'comments' => [ \$include_comments_above_subs, 0, [ qw(m comments-above-subs sub-comments) ] ],
  'verbose' => [ \$verbose, 0, [ qw(v) ] ],
  META_OPTION_NON_OPTIONS_REQUIRED, 1,
);

my @command_line_options_help = (
  [ OPTION_HELP_BANNER ] => 'Show subroutines in Perl source code or remove specified subs',

  [ OPTION_HELP_CATEGORY, Y_2_3, ] => Y.'General Options',
  'sub' => 'Print the declarations and bodies of the ^specified subroutine(s)^ or them remove if -remove is given',
  'remove' => 'Print the full contents of the specified files ^~except~^ for the specified subroutines',
  'table' => 'Show the selected fields in a ^table^ instead of simple text output',
  'sort' => 'Sort the subroutines within each file ^by their names^',
  'anon' => 'Include ^anonymous^ subroutines (^blocks, closures, lambdas,^ etc)',
  'colorize' => '^Colorize^ and add ^syntax highlighting^ to displayed code for selected subroutines',
  'tokens' => 'Show boundaries between parsed ^tokens^',
  'sep' => 'Print specified text (instead of \n) after printing the metadata for each subroutine',
  [ OPTION_HELP_CATEGORY, G_2_3 ] => G.'Fields to Display',
  'names' => 'Show ^names^ of subroutines',
  'protos' => 'Show ^prototypes^ (if present) of the listed subroutines',
  'attrs' => 'Show ^attributes^ (if present) of the listed subroutines',
  'returns' => 'Show ^returned data types^ (if they can be determined) of the listed subroutines',
  'filenames' => 'Show which ^source filename^ defines each listed subroutine',
  'lines' => 'Show the ^line and column^ in each source file where each subroutine is defined',
  'offsets' => 'Show the ^character offset^ in each source file where each subroutine is defined',
  'packages' => 'Show ^fully qualified^ subroutine names including the ^package name'.X,
  'args' => 'Show names of subroutine ^arguments^ (if found in usual "my ($arg1, ...) = @_" format',
  [ OPTION_HELP_SPACER ] => '',
  'verbose' => 'Show ^all of the above^ (-protos -attrs -returns -filenames -lines -offsets -packages)',
  [ OPTION_HELP_SPACER ] => '',
  'code' => 'Show the ^source code^ within the body of each subroutine',
  'comments' => 'Show (or remove) any ^comments and/or POD documentation^ directly above each subroutine',
);

my ($filenames, $invalid_args) = parse_and_check_command_line(%command_line_options, @ARGV, @command_line_options_help);
my %specified_sub_names = (map { $_ => 1 } @specified_sub_names);

$colorize_code //= 1 if ($show_code && is_stdout_color_capable());
$show_code //= 1 if ($colorize_code);

$show_as_table = 0 if ($show_code || $include_comments_above_subs);

my $sn = bool (((scalar @specified_sub_names) || $verbose || 
  $include_comments_above_subs || $show_code || $show_as_table) && 
  (!any_defined $show_names, $show_prototypes, $show_attributes,
   $show_filenames, $show_lines, $show_argument_names));

$show_names //= $sn;
$show_prototypes //= $sn;
$show_attributes //= $sn;
# $show_return_types //= $sn;
$show_filenames //= (!$show_code) && $sn && ((scalar @$filenames) > 1);
$show_lines //= (!$show_code) && $sn;
$show_argument_names //= $sn;

my %filename_to_subs;
my %sub_to_info;

my $anonymous_sub_counter = 0;

foreach my $filename_or_package (@$filenames) {
  my $filename = undef;

  if ($filename_or_package eq '-') 
    { $filename = '/dev/stdin'; }
  elsif (($filename_or_package =~ /\A $perl_package_name_re \Z/oamsx) 
  && (!path_exists($filename_or_package))) { 
    $filename = find_perl_module($filename_or_package);
    if (!defined $filename) {
      warning('Cannot find Perl module .pm file for package "'.$filename_or_package.'"');
      next;
    }
    prints($filename, ' (package ', $filename_or_package, ')'.NL);
  } else { $filename = $filename_or_package; }

  my $code = read_file($filename);

  if (!defined $code) {
    warning('Cannot read file "'.$filename.'"; skipping');
    next;
  }

  if ($remove_subs) {
    $code = remove_perl_subs(
      $code, ((@specified_sub_names) ? @specified_sub_names : undef));

    print('# '.$filename.NL) if ((scalar @$filenames) > 1);
    print($code);
  } else {
    my $parts_to_extract = cond_or
      $show_code => EXTRACT_PERL_SUB_CODE,
      $show_lines => EXTRACT_PERL_SUB_LINE_NUMBERS,
      $include_comments_above_subs => EXTRACT_PERL_SUB_COMMENTS_AND_POD_DOCS,
      $show_argument_names => EXTRACT_PERL_SUB_ARG_NAMES,
      $show_return_types => EXTRACT_PERL_SUB_RETURN_TYPES,
      $show_anonymous_subs => EXTRACT_PERL_SUB_INCLUDING_ANONYMOUS_SUBS;
      
    my $subs_in_file = parse_perl_source_and_extract_subs(
      $code, $parts_to_extract, \$anonymous_sub_counter);

    $filename_to_subs{$filename} = $subs_in_file;
    foreach my $info (@$subs_in_file) { 
      $sub_to_info{$info->{name}} = $info; 
    }
  }
}

my @table = ( );

sub truncate_string_with_elipsis($;$$) {
  my ($s, $limit, $elipsis) = @_;
  $limit //= get_terminal_width_in_columns();
  $elipsis //= (stdout_is_terminal()) ? elipsis_three_dots : '...';
  my $over = (length $s) - ($limit - printed_length($elipsis));
  return $s if ($over <= 0);
  return (substr($s, 0, $limit).$elipsis);
}

while (my ($filename, $subs) = each %filename_to_subs) {
  if ($sort_by_name) 
    { $subs = [ sort { $a->{name} cmp $b->{name} } @$subs ]; }

  foreach my $info (@$subs) {
    my ($name, $proto, $attrs, $return_types, $arg_names, 
        $body, $comments, $package, $filename, $offset, $line, $col) = 
          getfields $info, qw(name proto attrs returns args code comments 
                              package filename offset line column);

    next if ((@specified_sub_names) && (!exists $specified_sub_names{$name}));

    if ($show_as_table) {
      my @row = ( );
      push @row, $name if ($show_names);
      push @row, ((defined $proto) ? '('.$proto.')' : '') if ($show_prototypes);
      push @row, ((defined $arg_names) ? '('.join(', ', @$arg_names).')' : '') if ($show_argument_names);
      push @row, join('', map { ' :'.$_ } @$attrs) if ($show_attributes);
      push @row, join(' | ', @$return_types) if ($show_return_types);
      push @row, $package if ($show_packages);
      push @row, $filename if ($show_filenames);
      push @row, $line if ($show_lines);
      push @row, $offset if ($show_offsets);
      push @table, [ @row ];
    } else {
      my $out = '';

      $out .= $comments if ($include_comments_above_subs);
      $out .= 'sub ' if ($show_code);
      $out .= $package.'::' if ($show_packages);
      $out .= $name if ($show_names);
      $out .= ' ' if ($show_prototypes && (defined $proto) && !$show_code);
      $out .= '('.truncate_string_with_elipsis($proto, 20).')' if ($show_prototypes && (defined $proto));
      
      if ($show_attributes) { $out .= join('', map { ' :'.$_ } @$attrs); }
      
      $out .= ' {' if ($show_code);
      if ($show_filenames || $show_lines || $show_offsets) {
        $out .= ' #' if ($show_code);
        $out .= ' in '.$filename if ($show_filenames);
        $out .= ' @ '.$line if ($show_lines);
        $out .= ' (offset '.$offset.')' if ($show_offsets);
      }
      
      $out .= $body.'}'.NL if ($show_code);
      $out .= NL;
      
      if ($colorize_code) 
        { $out = format_perl_module_source($out, undef, $show_token_boundaries); }

      prints($out);
    }
  }
}

if ($show_as_table) { 
  my @lines = format_table(@table, colseps => '  ',
    row_suffix => '', return_lines => 1); 
  prints(join($output_separator, @lines));
}

exit 0;
