#!/usr/bin/perl -w
# -*- cperl -*-
#
# iwscan:
# Scan 802.11 wireless networks to find all visible SSIDs, NWIDs, APs, cells,
# and corresponding configuration, encryption, bandwidth and related details.
#
# Copyright 2015 Matt T. Yourst <yourst@yourst.com>
#

use integer; use warnings;

use MTY::Common::Common;
use MTY::Common::Hashes;
use MTY::Common::Strings;
use MTY::Filesystem::Files;
use MTY::Filesystem::FileStats;
use MTY::Filesystem::EnhancedFileStats;
use MTY::Common::CommandLine;

use MTY::System::POSIX;
use MTY::Filesystem::ProcFS;
use MTY::Filesystem::BtrFS;
use MTY::Filesystem::ExtAttrs;
use MTY::Filesystem::Mounts;
use MTY::System::Misc;

use MTY::Display::Colorize;
use MTY::Display::ColorizeErrorsAndWarnings;
use MTY::Display::ANSIColorREs;
use MTY::Display::PrintableSymbols;
use MTY::Display::PrintableSymbolTools;
use MTY::Display::Scrollable;
use MTY::Display::TextInABox;
use MTY::Display::Tree;

use MTY::RegExp::Define;
use MTY::RegExp::Tools;
use MTY::RegExp::Numeric;
use MTY::RegExp::Strings;
use MTY::RegExp::Blocks;
use MTY::RegExp::FilesAndPaths;
use MTY::RegExp::Networks;

use constant {
  thin_space => chr(0x2009),
  super_thin_space => chr(0x200a),
  zero_space => chr(0x200b),
};

use constant {
  three_horiz_lines => chr(0x2630),
};

sub format_alt {
  return $Y.'-'.join(K_2_3.' '.long_narrow_vert_bar.' '.$Y.'-', @_).$X;
}

my $help = 
  NL.
  $C.$U.'Overview:'.$X.NL.
  NL.
  '  Scan 802.11 wireless networks to find all visible SSIDs, NWIDs, APs, cells '.NL.
  '  configuration, encryption, bandwidth and related details.'.NL.
  NL.
  $C.$U.'Syntax:'.$X.'  iwscan [-i <interface>] [<ssid>] [-r|-stdin|-from-stdin] [-dump] [-summary|-s|-ssids]'.NL.
  NL.
  $C.$U.'Options:'.$X.' '.$M.'<interface>'.$X.' is the wireless network interface (e.g. wlan0) to scan'.NL.
                       NL.
  '         '.$M.'[<ssid>]'.$X.'   is an optional SSID; only show cells with this SSID'.NL.
                       NL.
  '         '.format_alt('verbose', 'v').'   Print a complete listing of all data about every SSID '.NL.
  '                         by iwscan, rather than only a short summary of SSIDs, APs, etc."'.NL.
                       NL.
  '         '.format_alt('stdin', 'r').'    reads a previously saved dump of "iw dev wlanX scan"'.NL.
  '                       instead of actually (slowly) re-scanning the network'.NL.
                       NL.
  '         '.format_alt('machine-readable', 'm').'    dumps the wireless network information tree'.NL.
  '                       in machine readable format'.NL.
                       NL.
  '         '.format_alt('dump', 'd').'    dumps the internal output of "iw dev wlanX scan" to'.NL.
  '                       stdout (for manual analysis or later use with -stdin)'.NL.
                       NL.
  '         '.format_alt('debug').'       print additional debugging and status information'.NL.
                       NL.
  '         '.format_alt('use-iw', 'u').'    uses iw command instead of iwlist command'.NL.
  NL.
  '         '.format_alt('current', 'c').'    shows currently configured settings of current SSID and cell instead of scanning'.NL.
  NL.
  NL.'(Note: iwscan depends on the existing "iw" and "iwlist" utilities (version 30 or later)'.NL.
  NL;

my $interface = 'wlan0';
my $filter_to_only_ssid = undef;
my $only_list_ssids = 0;
my $show_current_info = 0;
my $read_scan_data_from_stdin = 0;
my $dump_scan_data_to_stdout = 0;
my $machine_readable_format = 0;
my $verbose = 0;
my $debug = 0;
my $show_consolidated_listing = 0;
my $use_iw = 0;
my $quiet = 0;

sub print_debug {
  return if (!$debug);
  STDOUT->flush();
  printfd(STDERR, $K.double_left_angle_bracket.$R.' ');
  printfd(STDERR, @_);
  printfd(STDERR, $K.' '.double_right_angle_bracket.$X.NL);
}

my %command_line_options = (
  'interface' => [ \$interface, OPTION_VALUE_REQUIRED, 'i' ],
  'list-ssids' => [ \$only_list_ssids, 0, 'l' ],
  'ssid' => [ \$filter_to_only_ssid, OPTION_VALUE_REQUIRED, 's' ],
  'current' => [ \$show_current_info, 'c' ],
  'verbose' => [ \$verbose, 0, 'v' ],
  'stdin' => [ \$read_scan_data_from_stdin, 0, [qw(r from-stdin test)] ],
  'machine-readable' => [ \$machine_readable_format, 0, [qw(m mr machine raw)] ],
  'dump' => [ \$dump_scan_data_to_stdout, 0, [qw(a all d)] ],
  'debug' => \$debug,
  'use-iw' => [ \$use_iw, 0, [qw(iw u)] ],
  'quiet' => [ \$quiet, 0, 'q' ],
  'help' => [ \$need_help, 0, 'h' ],
);

my ($extra_args, $invalid_args) = parse_command_line(%command_line_options, @ARGV);

if (scalar keys %$invalid_args) {
  print_invalid_options($invalid_args);
  die('Invalid command line options; aborting');
}

if (defined $extra_args->[0]) { $interface //= $extra_args->[0]; }
if (defined $extra_args->[1]) { $filter_to_only_ssid //= $extra_args->[1]; }

$need_help |= (!defined $interface);

$quiet |= $only_list_ssids || $machine_readable_format; 

#if (!$quiet) {

if ($need_help) {
  printfd(STDERR, print_banner($C.'iwscan', $Y.'Wireless network scanner for available SSIDs, APs and more', $B));
  printfd(STDERR, $help);
  exit(255);
}

if (!$quiet) {
  if ($read_scan_data_from_stdin) {
    printfd(STDERR, $B.' '.arrow_head.' '.$C.'Reading previously captured scan data from stdin for wireless interface '.$Y.$interface.$K.'...');
  } else {
    printfd(STDERR, $B.' '.arrow_head.' '.$C.'Scanning wireless interface '.$Y.$interface.$K.'...');
  }
}

# read whole file all at once instead of as individual lines:
local $/;

$cmd = ($use_iw) ? "iw dev $interface scan" :  "iwlist $interface scanning";

print_debug(NL."executing '$cmd'");

$text = ($read_scan_data_from_stdin) ? read_file_handle(STDIN) : qx{$cmd};
my $iw_exit_code = $? >> 8;

print_debug("command returned exit code $iw_exit_code (errno $!) with a ".length($text)."-byte response");

if ((!defined $text) || ($iw_exit_code != 0)) {
  printfd(STDERR, $R.' '.x_symbol.$Y.' FAILED '.$X.NL.NL);
  die("The ".($use_iw ? 'iw' : 'iwlist')." program could not be found and/or its execution failed (error was $!)");
}

if (!$quiet) {
  prints($G.checkmark.' done!'.$X.NL.NL);
}

if ($dump_scan_data_to_stdout) {
  prints($text);
  goto done;
}

my $dBm_re = qr{(-? \d++) (?> \. \d++)? \s++ dBm}oax;

my $channel_re = qr{channel \s*+ (\d+)}oax;

my $freq_re = qr{($fp_literal_re) \s*+ (?> [KMG]Hz) \b}oax;

my $quality_re = qr{^(\d++) \s*+ / \s*+ (\d++)$}oax;

my $bitrate_re = qr{([\d\.]++) \s*+ ([KMG])b/s}oamsx;
my $bitrate_mbps_re = qr{([\d\.]++) \s*+ Mb/s ;?}oamsx;

my $iwlist_scan_cell_re = 
  qr{^ \s++ Cell \s \w++ \s+ - \s+ Address: (\N++) \n
     ((?> ^ \s++ (?! Cell) \N*+ \n)*+)
  }oamsx;

my $iwlist_scan_attr_re = 
  qr{\s++ 
     (?|
#       (?: (Frequency) \s*+ : \s*+ ([\d\.]++ \s*+ [GM]Hz)) |
#       (?: \( (Channel) \s++ ([\d]++) \) \n) |
       (?: (Quality) \s*+ = \s*+ (\d+ / \d+)) |
       (?: (Signal [\w\s]++) \s*+ = \s*+ (\N++) \n) |
       (?: ([A-Za-z] [A-Za-z\ ]*+) \s*+ : \s*+ (\N++)) |
       (?: () ([^\n\:]++))
     )
  }oamsx;

my $iw_scan_report_re = qr{
  ^ BSS \s ([0-9A-Fa-f\:\-]+) \s \( on \s \w+ \) \n
  ((?>
    ^ (?! BSS) \s* \N* \n
  )+)
}oamsx;

sub generate_lines_with_leading_spaces_until_stop_marker_regexp($) {
  my ($stopmark) = @_;
  return qr{(?> \s++ (?! $stopmark) \N*+ \n)*+}oamsx;
}

my $capabilities_re = '(Capabilities:) '.generate_lines_with_leading_spaces_until_stop_marker_regexp('Maximum \s RX');
my $country_re = '(Country:) '.generate_lines_with_leading_spaces_until_stop_marker_regexp('Power \s');

my $field_colon_value_re = qr{
  ^ \s*+
  (?|
    (?: (?> \* \s++)? ([^\:]+) \: \s*+ (\N+) \n) |
    (?: $capabilities_re) |
    (?: $country_re)
  )
}oamsx;

my %bss_to_details = ( );
my %ssid_to_list_of_bss = ( );

my $longest_field_name_length = 4; # e.g. "ssid", etc.

my $max_label_length = 0;
my $max_ssid_length = 0;

my $use_re = ($use_iw) ? $iw_scan_report_re : $iwlist_scan_cell_re;
my $use_attr_re = ($use_iw) ? $field_colon_value_re : $iwlist_scan_attr_re;

my %cell_attr_mappings = (
  'ESSID' => 'SSID',
  'Signal level' => 'signal',
  'Quality' => 'quality',
  'Encryption key' => 'encryption',
  'Bit Rates' => 'bitrates',
  'Mode' => 'mode',
  'DS Parameter set' => 'channel',
  'Channel' => 'channel',
  'Frequency' => 'freq'
);

#my %cell_attr_regexps = (
#   # 'bitrates' => $bitrate_re,
#  'freq' => qr{($freq_re)}oamsx,
#);

#my %cell_attr_replacements = (
#  'freq' => '<$1>'
#);

my %cell_attr_replacements = (
  'ssid' =>     sub { my ($v) = @_; return ($v =~ s{^" .* "$}{}oax); },
  'freq' =>     sub { my ($v) = @_; return ($v =~ /$freq_re/oamsx) ? $1 : $v; },
  'signal' =>   sub { my ($v) = @_; return ($v =~ /$dBm_re/oamsx) ? $1 : $v; },
  'bitrates' => sub { my ($v) = @_; return join(', ', split(/\s++/oamsx, ($v =~ s{$bitrate_mbps_re}{$1}roamsxg))); },
  'quality' =>  sub { my ($v) = @_; return ($v =~ /$quality_re/oamsx) ? format_as_percent($1, $2) : $v; },
  'encryption' => sub { my ($v) = @_; return ($v eq 'on') ? 1 : ($v eq 'off') ? 0 : undef; },
);

sub format_as_percent($$) {
  my ($a, $b) = @_;
  no integer;
  return int(($a / $b) * 100);
  use integer;
}

while ($text =~ /$use_re/oamsxg) {
  my ($bss, $details_text) = ($1, $2);
  my $details = { '' => $details_text };
  $details->{BSS} = $bss;
  $bss_to_details{$bss} = $details;
  my $prev_key = undef;
  #print_debug("bss=[$bss], details=[$details_text]");

#++MTY I18N: These should be translated and internationalized!
#my $en_US_affirmatives_and_negatives_to_0_and_1 = (
#  # (various affirmative phrasings):
#  arrays_to_hash_keys([1, 0], [ qw(affirmative confirm confirmed start started enable enabled active ok on yes) ],
#                              [ qw(negative deny denied stop stopped disabled inactive not off no) ]);
#);
  
  while ($details_text =~ /$use_attr_re/oamsxg) {
    my $key = $1 // '?';
    my $value = $2 // '?';
    if (!length $key) { $key = $prev_key; }
    if (exists $cell_attr_mappings{$key}) { $key = $cell_attr_mappings{$key}; }

    if (($key eq 'freq') && ($value =~ /$freq_re/oamsx)) { 
      $value = $1; 
    } elsif ($key eq 'bitrates') { 
      $value =~ s{$bitrate_mbps_re}{$1}oamsxg; 
      $value = join(', ', split(/\s++/oamsx, $value));
    } elsif (($key eq 'signal') && ($value =~ /$dBm_re/oamsx)) {
      $value = $1;
    } elsif (($key eq 'quality') && ($value =~ /$quality_re/oamsx)) {
      $value = format_as_percent($1, $2);
   } elsif ($key eq 'encryption') {
      $value = (($value eq 'on') ? 1 : ($value eq 'off') ? 0 : undef);
    }
    
    # if (exists $cell_attr_regexps{$key}) {
    # my $regexp = $cell_attr_regexps{$key}; 
    # my $repl = $cell_attr_replacements{$key};
    # $value =~ s/$regexp/$repl/oamsxge;
    # }
    #if ($key =~ /[Ff]req/oasmxi) { $value =~ s{($freq_re)}{$1}oamsx; }

    print_debug("[$key] => [$value]");
    if (exists $details->{$key}) {
      $details->{$key} .= ' '.$value;
    } else {
      $details->{$key} = $value;
    }
    if ((length $key) > $max_label_length) { $max_label_length = length($key); }
    $prev_key = $key;
  }

  my $ssid = $details->{SSID};
    
  if (defined $ssid) {
    if ((length $ssid) > $max_ssid_length) { $max_ssid_length = length($ssid); }
    if (!exists $ssid_to_list_of_bss{$ssid}) {
      $ssid_to_list_of_bss{$ssid} = [ $bss ];
    } else {
      push @{$ssid_to_list_of_bss{$ssid}}, $bss;
    }
  }
}

my @sorted_ssid_list = sort(keys %ssid_to_list_of_bss);

if ($only_list_ssids) {
  foreach $ssid (@sorted_ssid_list) {
    prints($ssid.NL);
  }
  exit 0;
}

sub quote_if_spaces_included($;$) {
  my ($s, $q) = @_;
  $q //= '"';
  if ($s !~ /\s/oax) { $q = ''; }
  return $q.$s.$q;
}

sub add_prefix_to_lines($$) {
  my ($text, $prefix) = @_;
  my $out = '';
  foreach my $line (split /\n/oax, $text) { $out .= $prefix.$text.NL; }
  return $out;
}

sub indent_lines($$) {
  my ($text, $n) = @_;
  my $prefix = ' ' x $n;
  return add_prefix_to_lines($text, $prefix);
}

prints(print_folder_tab($Y.'Found '.$G.(scalar @sorted_ssid_list).$Y.' SSIDs on interface '.$C.$interface.$Y.':'));

my $ssid_tree = [ 
  [
    [ TREE_CMD_SYMBOL, asterisk ],
    $M.$interface,
  ],
];

sub subst_regexp_in_tree(+$$) {
  my ($node, $regexp, $subst) = @_;
  
  my $label = $node->[0];

  if (is_array_ref($label)) {
    foreach my $chunk (@$label) {
      if (!is_array_ref($chunk)) { $chunk =~ s{$regexp}{$subst}oamsxge; }
    }
  }
#  foreach $subnode = 
}

my @attrs_to_show = (
  'signal',
  'quality',
  'freq',
  'channel',
  'bitrates',
  'mode',
  'encryption',
);

my %attrs_to_show = (
  'signal' => 'Signal Strength',
  'quality' => 'Signal Quality',
  'freq' => 'Frequency (MHz)',
  'channel' => 'Channel',
  'bitrates' => 'Bitrates Supported',
  'mode' => 'Connection Mode',
  'encryption' => 'Encryption',
);

# each array element is an increment of 5%:
sub percent_range_to_color($) {
  my ($p) = @_;
  my $ps = (255.0 / 100.0);

  no integer;
  return ($p < 50) ? 
    fg_color_rgb(255, clipto(int($p * $ps), 0, 255), 0) :
    fg_color_rgb(255 - clipto(int(($p - 50) * $ps), 0, 255), 255, 0);
  use integer;
}
  
sub format_as_horiz_bar_graph($;$$) {
  my ($percent, $bar_length, $bgcolor) = @_;
  $bar_length //= 20;
  $bgcolor //= K_1_3;
  no integer;

  my $scaled = int((($percent / 100.0) * $bar_length) + 0.5);
  return 
    percent_range_to_color($percent).
    padstring($percent, '-3').'%  '.
    (solid_block x $scaled).
    $bgcolor.(solid_block x ($bar_length - $scaled)).$X;
  use integer;
}

my %attr_units = (
  'signal' => 'dBm',
  'quality' => '%',
  'freq' => 'MHz',
  'bitrates' => 'Mbits/sec',
);

use constant {
  ap_icon => sun_rays.' AP',
  key_icon => chr(0x00a9).chr(0x2500).chr(0x2565).chr(0x2556),
  # key_icon => chr(0x00a9).chr(0x2500).chr(0x2556),
};

foreach $ssid (@sorted_ssid_list) {
  my $bsslist = $ssid_to_list_of_bss{$ssid};
  next if ((defined $filter_to_only_ssid) && (defined $ssid) && ($ssid ne $filter_to_only_ssid));
  my $ssid_label = [
    [ TREE_CMD_SYMBOL, C_2_3.dice_5_dots.' ' ],
    $C.$ssid.' ',
  ];

  my $ssid_node = [ $ssid_label ];
  push @$ssid_tree, $ssid_node;
  
  if ($show_consolidated_listing && ((scalar @$bsslist) == 1)) {
    # use short one-line form:
    push $ssid_label, ' '.$K.sun_rays.' '.Y_2_3.' AP  '.$Y.$bsslist->[0].' ';
  } else {
    foreach $bss (@$bsslist) {
      my $cellinfo = $bss_to_details{$bss};
      die if (!defined $cellinfo);

      my $signal = $cellinfo->{'signal'} // '-1000 dBm';
      #if ($signal =~ /$dBm_re/oax) { $signal = $1; };

      my $channel = $cellinfo->{'channel'} // 'channel 0';
      #if ($channel =~ /$channel_re/oax) { $channel = $1; };

      my $freq = $cellinfo->{'freq'} // 0;

      my $quality = $cellinfo->{'quality'} // 0;

      my $encryption = $cellinfo->{'encryption'} // 0;

      my $icon_color = ($encryption) ? $R : $Y;
      my $icon = ($encryption) ? key_icon : ap_icon;

      my $bss_node = [
        [
          [ TREE_CMD_SYMBOL, $icon_color.$icon.' '],
          $icon_color.($bss =~ s{\:}{$K:$icon_color}roaxg),
          $B.' '.long_bold_right_arrow_heavy_line.' '.
          $B.K_2_3.' @ '.$M.$freq.M_2_3.' MHz'.
          K_2_3.' on '.B_2_3.'channel '.$B.padstring($channel, -2).K_2_3.': ',
          $G.$signal.G_2_3.' dBm '.
          format_as_horiz_bar_graph($quality, 20, ($encryption ? R_1_4 : K_1_4)),
          (($encryption) ? $R.' (encrypted)' : ''),
        ]
      ];
      push @$ssid_node, $bss_node;

      #prints($R.join(' ', sort keys %bss_to_details).NL);
      
      if ($debug) {
        my $rawtext = $cellinfo->{''};
        my ($lines, $indents) = split_text_into_arrays_of_lines_and_indents($rawtext);
        my $rawtree = labels_and_levels_to_tree($lines, $indents);
        #subst_regexp_in_tree($rawtree, $field_colon_value_re, '$G$1$B = $W$2$X\n');
        #$rawtext =~ s{$field_colon_value_re}{}oamsxg;
        $rawtree->[0] = [
          [ TREE_CMD_SYMBOL, $B.arrow_open_tri ],
          $U.G_2_3.'(raw data from iw command)'.$X,
        ];
        
        push @$bss_node, $rawtree;
      } elsif ($verbose) {
        foreach $attr (@attrs_to_show) {
          my $value = $cellinfo->{$attr};
          my $units = $attr_units{$attr} // '';
          my $attr_node = [
            [ TREE_CMD_SYMBOL, $B.arrow_open_tri ],
            $G.($attrs_to_show{$attr} // $attr),
            $B.' = ',
            $X.($value // ($K.'???')).$B.' '.$units,
          ];
          if ($attr eq 'quality') { push @$attr_node, '  '.format_as_horiz_bar_graph($value, 20); };
          push @$bss_node, [ $attr_node ];
        }
      }
    }
  }
}

print_tree($ssid_tree);

#if (!$verbose) { goto done; }
#
#prints(NL.NL.'Found '.(scalar(keys %bss_to_details)).' BSS cells (nodes or APs):'.NL);
#
#while (my ($bss, $details) = each %bss_to_details) {
#  my $ssid = $details->{'SSID'} // '';
#  next if ((defined $filter_to_only_ssid) && (defined $ssid) && ($ssid ne $filter_to_only_ssid));
#  prints(NL.'  Node or AP '.($details->{BSS} // '???').' in SSID '.($ssid // '<unknown>').':'.NL);
#  while (my ($k, $v) = each %{$details})
#    { printf('    %-'.$max_label_length.'s = %s\n', $k, ($v // '-')); }
#  if ($debug) {
#    prints(STDERR '    (Raw output from "iw dev '.$interface.' scan"):'.NL);
#    prints(add_prefix_to_lines($details->{''}, 4).NL); # print the raw text we captured
#  }
#}
#      while (my ($key, $value) = each %$cellinfo) {
#        next;
#        next if (!length $key); # skip the raw output pseudo-entry
#        my $info_node = [
#          [
#            [ TREE_CMD_SYMBOL, $B.arrow_open_tri ],
#            #[ TREE_CMD_FIELD, 0 ],
#            $G.$key,
#            $B.' = ',
#            #[ TREE_CMD_FIELD, 1 ],
#            $W.$value, # // $K.'???'),
#          ],
#        ];
#        push @$bss_node, $info_node;
#      }

done:

if (!$quiet) {
  prints(NL.$K.'(End of report from scanning '.$G.$interface.$K.')'.$X.NL.NL);
}

