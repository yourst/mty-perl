#!/usr/bin/perl -w
# -*- cperl-*-
#
# perlwhich: 
#
# Find Perl modules by their package names (e.g. Module::Name::Here),
# or list the package(s) declared in the specified *.pm Perl source files, or
# print a graphical tree by filenames (*.pm), Module::Names, or the nested
# namespace hierarchy of modules.
#
# Copyright 2003-2014 Matt T Yourst <yourst@yourst.com>. All rights reserved.
#

use integer; use warnings;
use MTY::Common::Common;
use MTY::Common::Strings;
use MTY::Common::Hashes;
use MTY::Common::CommandLine;
use MTY::Display::Colorize;
use MTY::Display::PrintableSymbols;
use MTY::RegExp::Tools;
use MTY::RegExp::Strings;
use MTY::System::POSIX;

my $max_line_width = undef;
my $unlimited_width = 0;
my $use_color = undef;

my %command_line_options = (
  'width', [ \$max_line_width, OPTION_VALUE_REQUIRED, [ 'w' ] ],
  'long', [ \$unlimited_width, 0, [ 'long-lines', 'unlimited-width', 'u', 'l' ] ],
  'color', [ \$use_color, 0, [ 'c' ] ],
);

my ($filenames, $invalid_args) = parse_and_check_command_line(%command_line_options, @ARGV);

my $is_stdout_terminal = (-t STDOUT) ? 1 : 0;
$max_line_width //= ($is_stdout_terminal) ? get_terminal_width_in_columns() : undef;
if ($unlimited_width) { $max_line_width = undef; }

$use_color //= ($is_stdout_terminal) ? 1 : 0;

# This extra complexity is needed because the DESCRIPTION field may contain newlines, which we want to remove:
my $query_uninstalled_rpm_files = 0;
foreach (@$filenames) { $query_uninstalled_rpm_files += ($_ =~ /\.rpm$/) ? 1 : 0; }

my $cmdline = 'rpm -q '.(($query_uninstalled_rpm_files > 0) ? '-p' : '')." --qf '%{NAME}\t%{VERSION}\t%{DESCRIPTION}\f' ".join(' ', @$filenames);
my $out = qx{$cmdline};

my $split_rpm_output_re = qr{([^\t]+) \t ([^\t]+) \t ([^\f]+) \f}oamsx;

my @table = ( );
my $darkK = K_1_2;

my $rest_of_desc_color = ($use_color) ? fg_color_rgb(128, 128, 0) : '';

my $name_color = ($use_color) ? G : '';
my $ver_color = ($use_color) ? B : '';
my $description_color = ($use_color) ? Y : '';

while ($out =~ /$split_rpm_output_re/oamsxg) {
  my ($name, $version, $description) = ($1, $2, $3);
  undefs_to_inplace('???', $name, $version, $description);

  next if ($name =~ /-debug(?:info|source)$/oax);

  $description =~ s{\n}{ }oamsxg;
  $description =~ s{\.\K}{$rest_of_desc_color}oax;
  push @table, [ $name_color.$name, $ver_color.$version, $description_color.$description ];
}
$max_line_width = undef;
print_columns(STDOUT, @table, '  ', '  ', NL, [ALIGN_LEFT, ALIGN_RIGHT, ALIGN_LEFT]);
