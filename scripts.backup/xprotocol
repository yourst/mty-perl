#!/bin/bash
#
# Determine the X11 protocol transport used to connect to the target X server.
# If the client machine from which the user has logged in remotely is enabled
# to accept direct X11 connections on tcp port 6000 from this machine, use
# that transport instead of the higher overhead ssh tunnel from the client.
# The client needs to have its X server listening on TCP, and the user needs
# to run "xhost +name_of_this_machine" on their client machine for this to work.
# If the client and server are the same machine (i.e. user is on local display),
# this script just outputs ":0.0" so the local socket X0 is used.
#
ip_to_hostname() {
  V=`host $@`
  V=${V/*domain name pointer /}
  V=${V/%.}
  echo $V
}

[[ -n $SSH_CLIENT ]] && read REMOTE_IP __rest_is_unused__ <<< $SSH_CLIENT
[[ -z $REMOTE_IP ]] && { echo "unknown"; exit 0; }

export REMOTE_HOSTNAME=`ip2hostname $REMOTE_IP`

# [ -n "$REMOTE_HOSTNAME" ] && export REMOTE_IP=`host $REMOTE_HOSTNAME | perlre '\s+(\S+)$' '$1'`

# [ -n "$SSH_CLIENT" ] && export REMOTE_IP=`echo $SSH_CLIENT | cut -d" " -f1`
# [ -n "$REMOTE_IP" ] && export REMOTE_HOSTNAME=`dig +short -x $REMOTE_IP`

[[ -z $DISPLAY ]] && { echo "none"; exit 0; }
[[ $DISPLAY =~ ^\:[0-9]+ ]] && { echo "local"; exit 1; }
[[ -n "$REMOTE_HOSTNAME" ]] && xdpyinfo -display $REMOTE_HOSTNAME:0.0 >& /dev/null && { echo "tcp ssh($REMOTE_IP)"; exit 2; }
[[ $DISPLAY =~ ^localhost:[0-9]+ ]] && { echo "ssh($REMOTE_IP)"; exit 3; }
[[ $DISPLAY =~ ^.+:[0-9]+ ]]&& { echo "tcp"; exit 4; }
echo "unknown"; exit 5;
