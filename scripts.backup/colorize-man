#!/usr/bin/perl -w
# -*- cperl -*-
#
# colorize-man: 
#
# Colorize and intuitively reformat man pages, with color coded tabs for
# section titles, highlighed cross references, keywords, examples and more.
# Makes man pages much easier to quickly read than the grayscale output
# produced by man itself.
#
# To use colorize-man, simply add 'export MANPAGER=colorize-man' to your 
# .bashrc, .profile or similar shell scripts. The colorized output will
# automatically be piped through 'less'.
#
# Copyright 2003-2015 Matt T. Yourst <yourst@yourst.com>. All rights reserved.
#

use integer; use warnings;

use MTY::Common::Common;
use MTY::Common::Hashes;
use MTY::Filesystem::Files;
use MTY::Common::Strings;
use MTY::RegExp::Define;
use MTY::Display::Colorize;
use MTY::Display::ColorCapabilityCheck;
use MTY::Display::ANSIColorREs;
use MTY::Display::PrintableSymbols;
use MTY::Display::PrintableSymbolTools;
use MTY::Display::TextInABox;
use MTY::Display::Scrollable;
use MTY::RegExp::Strings;

use IPC::Open3;
#pragma end_of_includes

my $ansi_fg_color_codes_re = qr{\e \[ ([13457] \d*) m}oax;
my $ansi_clear_color_codes_re = qr{\e \[ ([02] \d*) m}oax;

my %ansi_color_index_to_replacement = (
# 0 => X, # (handled by $ansi_clear_color_codes_re)
  1 => Y.U,
# 22 => X, # (handled by $ansi_clear_color_codes_re)
  4 => G.U,
# 24 => X, # UX  # (handled by $ansi_clear_color_codes_re)
);

my $lessfd = open_scrollable_stream() // STDOUT;

my $man_section_color = fg_color_rgb(255, 192, 160);

my @man_heading_color_sequence = ( C, G, Y, M, R, B );

my @man_heading_tab_outline_color_sequence = ( 
  C_1_2, 
  G_1_2, 
  Y_1_2, 
  M_1_2, 
  R_1_2,
  B_1_2);

my %man_heading_to_text_color = (
  'NAME' => fg_color_rgb(192, 255, 192),
  'SYNOPSIS' => fg_color_rgb(255, 192, 224),
  'DESCRIPTION' => fg_color_rgb(255, 236, 64),
  'OVERVIEW' => fg_color_rgb(96, 224, 255),
  'OPTIONS' => fg_color_rgb(64, 255, 128),
  'EXAMPLES' => fg_color_rgb(255, 192, 0),
  'BUGS' => fg_color_rgb(255, 160, 0),
  'SEE ALSO' => fg_color_rgb(255, 208, 64),
  'AUTHOR' => fg_color_rgb(255, 224, 224),
  'COPYRIGHT' => fg_color_rgb(224, 224, 255),
);

sub format_man_section($) {
  my ($section) = @_;
  return $man_section_color.' '.double_left_angle_bracket.$section.double_right_angle_bracket.$X;

#  if ($section =~ /^\d+$/oax) {
#    return $man_section_color.' '.enclosed_digit($section, solid_circled_large_digits).' '.$X;
# return ' '.enclosed_digit($section, circled_large_digits).' '. $section.' '.$X;
# return $man_section_color.subscript_digits($section).$X;
#} else {
# return $man_section_color.' '.double_left_angle_bracket.$section.double_right_angle_bracket.$X;
# }
}

my $subject = '???';
my $section = '?';

my $heading_number = 0;

my $heading_tab_outline_color = fg_color_rgb(160, 40, 216);

$man_top_subject_and_section_re = qr{^ ([\w\-\:]+) \( (\d \w*) \) \s+}oax;
$man_heading_re = qr{^ \e \[ 1m ([A-Z][A-Z0-9\ ]+) \e \[ 0m $}oax;
$man_subheading_re = qr{^ (\s+) \e \[ 1m ([^\e]+) \e \[ 0m $}oax;

my $seen_top = 0;
my $accum_blank_lines = 0;
my $cols = get_terminal_width_in_columns();

# write_file('/tmp/man-page-dump', read_file_handle(STDIN_FD));
# exit 0;

my @man_page_lines = <STDIN>; #read_file_handle(STDIN_FD);

foreach (@man_page_lines) {
  chomp;
  my $without_colors = s{$ansi_fg_color_codes_re}{}roaxg;

  if (/^ \s* $/oax) {
    $accum_blank_lines++;
    if ($accum_blank_lines < 2) { printfd($lessfd, NL); }
    next;
  } else {
    $accum_blank_lines = 0;
  }

  if (!$seen_top && ($without_colors =~ /$man_top_subject_and_section_re/oax)) {
    ($subject, $section) = (lc($1), $2);
    printfd($lessfd, text_in_a_box($G.$subject.format_man_section($section),
                                  ALIGN_CENTER, $B, 'heavy', undef, 1, $cols-6));
    $seen_top = 1;
  } elsif (/$man_heading_re/oax) {
    my $heading = $1;
    my $tab_text_color = $man_heading_to_text_color{$heading} // $C;
    my $tab_outline_color = $man_heading_to_text_color{$heading} // $C;
    $heading = ucfirst(lc($heading));
    printfd($lessfd, print_folder_tab($tab_text_color.$heading.X, $tab_outline_color, ALIGN_LEFT));
  } elsif (/$man_subheading_re/oax) {
    my ($indent, $subheading) = ($1, $2);
    $indent = max(length($indent) - 1, 0);
    printfd($lessfd, (' ' x $indent).G_2_3.arrow_tri.' '.G.U.$subheading.UX.G_1_2.' '.(dashed_horiz_bar_2_dashes x ($cols - ($indent + length($subheading) + 4))).NL.NL);
  } else {
    my $out = $_ 
      =~ s{' ($inside_single_quoted_re) '}{${left_single_quote}${1}${right_single_quote}}roaxg
      =~ s{" ($inside_double_quoted_re) "}{${left_quote}${1}${right_quote}}roaxg
      =~ s{\S \K \( (\d\w*+) \)}{format_man_section($1)}roaxge
      =~ s{^\s{7}}{    }roax
      =~ s{(?<! \e) ([\[\]])}{$K$1$X}roaxg
      =~ s{(\s*) $ansi_clear_color_codes_re}{$X$1}roaxg
      =~ s{$ansi_fg_color_codes_re (?= --?\S+)}{$M}roaxg
      =~ s{$ansi_fg_color_codes_re}{($ansi_color_index_to_replacement{$1} // '')}roaxge;
    printfd($lessfd, $out.NL);
  }
}

exit 0;
