#!/usr/bin/perl -w
# -*- cperl -*-

use POSIX::2008 qw(basename dirname);
use MTY::Common::Common;
use MTY::Common::Strings;
use MTY::Display::Colorize;
use MTY::Display::PrintableSymbols;

binmode STDOUT,':utf8';

my $mincount = undef;
my $maxcount = undef;
my $show_counts = 1;
my $show_filenames = 0;
my $show_fileids = 1;
my $only_in_fileid = undef;
my $quiet = 0;

my @filenames = ( );
my $args_are_filenames = 0;

foreach my $arg (@ARGV) {
  if ($arg !~ /^-/) { $args_are_filenames = 1; }

  if ($args_are_filenames) {
    push @filenames,$arg;
  } elsif ($arg =~ /^-any$/oax) {
    $mincount = 1;
  } elsif ($arg =~ /^-(\d+) (?: [\,\-] (\d+))?$/oax) {
    $mincount = $1;
    if ((defined $2) && (length($2) > 0)) { $maxcount = $2; }
  } elsif ($arg =~ /^-min=(\d+)$/oax) {
    $mincount = $1;
  } elsif ($arg =~ /^-max=(\d+)$/oax) {
    $maxcount = $1;
  } elsif ($arg =~ /^-count=(\d+)$/oax) {
    $mincount = $1; $maxcount = $1;
  } elsif ($arg =~ /^-only-in=(\d+)$/oax) {
    $only_in_fileid = $1;
  } elsif ($arg =~ /^-(?:show-)?count/oax) {
    $show_counts = 1;
  } elsif ($arg =~ /^-(?:show-)?filenames/oax) {
    $show_filenames = 1;
  } elsif ($arg =~ /^-(?:show-)?ids?/oax) {
    $show_fileids = 1;
  } elsif ($arg =~ /^-q(?:uiet)?/oax) {
    $quiet = 1;
  } elsif ($arg eq '--') {
    $args_are_filenames = 1;
  } elsif ($arg eq '-') {
    push @filenames,'/dev/stdin';
    $args_are_filenames = 1;
  } elsif ($arg =~ /^-/) {
    die("Syntax is: intersect [-min=N] [-max=N] [-only-in=N] [-show-filenames] [-show-counts] [--] filename1 filename2 ...");
  }
}

my $filecount = scalar(@filenames);
$mincount //= $filecount;
$maxcount //= $filecount;
$mincount = max(min($mincount, $maxcount), 1);
$maxcount = min(max($mincount, $maxcount), $filecount);

if ($mincount != $maxcount) {
  $show_fileids = 1;
  $show_counts = 1;
}

if ($quiet) {
  $show_fileids = 0;
  $show_filenames = 0;
  $show_counts = 0;
}

#prints(STDERR "$mincount $maxcount $show_counts $show_fileids $show_filenames\n");

my %foundin = ( );

for my $i (0..($filecount-1)) {
  my $filename = $filenames[$i];
  my %added = ( );
  open($fd, '<', $filename) || die("Cannot open $filename\n");
  while (<$fd>) {
    chomp;
    my $k = $_;
    next if ($added{$k});
    $added{$k} = 1;
    if (!exists $foundin{$k}) {
      $foundin{$k} = [ $i ];
      # prints("foundin{$k} = $i\n");
    } else {
      push @{$foundin{$k}}, $i;
      # prints("foundin{$k} += ".join(' ', @{$foundin{$k}}).' too many') if (scalar(@{$foundin{$k}}) > $filecount);
    }
  }
}

my @unique_lines = sort keys %foundin;
my $longest_line = 0;
foreach $k (@unique_lines) { $longest_line = max($longest_line, length($k)); }
my $w = get_terminal_width_in_columns();
my $show_margin = $show_counts || $show_fileids || $show_filenames;
my $file_count_field_width = length(sprintf('%d', $filecount));
my $max_files_to_list = min($filecount, 8);
my $fileid_subfield_width = 2 * $max_files_to_list;
my $margin_width = 
  ($show_margin ? 1+1+1 : 0) + 
  ($show_counts ? (1 + $file_count_field_width + 1) : 0) + 
  ($show_fileids ? $fileid_subfield_width : 0);

$longest_line = min($longest_line, $w - $margin_width);
my $margin_left = bg_color_rgb(40, 40, 40).' ';
#prints(join("\n", @unique_lines));
my $darkK = fg_color_rgb(48, 104, 104);
my $darkR = fg_color_rgb(140, 48, 64);

if (defined $only_in_fileid) {
  foreach $k (@unique_lines) {
    my $fileids = $foundin{$k};
    my $n = scalar(@$fileids);
    next if ($n != 1);
    my $fid = $fileids->[0];
    next if ($fid != $only_in_fileid);
    prints($k.NL);
  }
  exit 0;
}

foreach $k (@unique_lines) {
  my $fileids = $foundin{$k};
  my $n = scalar(@$fileids);
  # prints('k ['.$k.'] #'.$n.' = ['.join(' ', @$fileids).']'.NL);
  if (($n >= $mincount) && ($n <= $maxcount)) {
    #prints('['.$n.': '. join(' ', @$fileids).'] vs [qw(.$mincount. .$maxcount.)] '.$k);
    if ($show_margin) {
      my $s = (($n == $filecount) ? bg_color_rgb(16, 40, 16) : bg_color_rgb(48, 12, 12)).' ';
      my $c = ($n == 1) ? (($filecount <= 2) ? $Y : $R) : ($n == $filecount) ? $G : $Y;
      if ($show_counts) {
        $s .= $c.sharp_sign.padstring($n, $file_count_field_width).(($n == $filecount) ? $G : $K).' '.long_narrow_vert_bar.' '; 
      }
      if ($show_fileids) {
        if ($filecount <= $max_files_to_list) { 
          # use the sparse format, e.g. 'A - - D E - G -':
          my $bitmap = 0;
          foreach my $id (@$fileids) { $bitmap |= (1 << $id); }
          my $t = 0;
          #$s .= sprintf('[%0'.$n.'b] ', $bitmap);
          for my $id (0..($max_files_to_list-1)) {
            if ($bitmap & 1) {
              $t++;
              my $c = ($t == 1) ? $R : ($t == $filecount) ? $G : $Y;
              $s .= $c.chr(ord('A') + $id).' ';
            } else {
              $s .= $K.dot_small.' ';
            }
            $bitmap >>= 1;
          }
        } else { 
          # packed format, i.e. 'A C D E     ':
          my $t = 0;
          foreach $id (@$fileids) {
            $t++;
            my $c = ($t == 1) ? (($filecount <= 2) ? $Y : $R) : ($t == $filecount) ? $G : $Y;
            $s .= $c.chr(ord('A') + $id).' ';
            if ($t == $max_files_to_list-1) {
              $t++;
              $s .= $R.large_plus.' ';
              last;
            }
          }
          $s .= $K.('  ' x ($max_files_to_list - $t));
        }
      }
      $c = ($n == 1) ? (($filecount <= 2) ? $darkK : $darkR) : ($n == $filecount) ? (($filecount <= 2) ? $C : $G) : $Y;
      $s .= ' '.$X.$K.(($n == $filecount) ? $G.chr(0x2503) : fg_color_rgb(96, 96, 96).long_narrow_double_vert_bars).$X.' '.$c;
      prints($s);
    }
    #if ($show_filenames) { prints($K.'[ '.$Y.join(' ', @$fileids).$K.' ] '.$X); }
    prints($k.NL);
  }
}

