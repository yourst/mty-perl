#!/usr/bin/perl -w
# -*- cperl -*-
#
# Copyright 2003-2015 Matt T. Yourst <yourst@yourst.com>. All rights reserved.
#

use integer; use warnings;

use MTY::Common::Common;
use MTY::Common::Hashes;
use MTY::Filesystem::Files;
use MTY::Common::Strings;
use MTY::RegExp::Define;
use MTY::RegExp::Strings;

sub check_circular_dependency {
  my ($deps, $target, $marks, $depth) = @_;

  $marks //= { };
  $depth //= 0;

  # prints('check_circular_dependency: '.('  ' x $depth).' '.$target.' ('.$depth.')'.NL);

  my $deplist = $deps->{$target};
  if (!defined $deplist) { return $depth; }
  
  my $maxdepth = $depth;

  foreach my $dep (@$deplist) {
    if (exists $marks->{$dep}) { 
      # prints('<'.$dep.' is circular>'.NL); 
      return undef; 
    }
    $marks->{$dep} = 1;
    my $newdepth = check_circular_dependency($deps, $dep, $marks, $depth+1);
    if (!defined $newdepth) { return undef; }
    set_max($maxdepth, $newdepth);
  }

  return $maxdepth;
}

my %deps = ( );
my $dep_re = qr{^ ([^:]++): \s++ (\N++) \n}oax;

while (<STDIN>) {
  if (/$dep_re/oax) {
    push @{$deps{$1}},$2;
  }
}

my @targets = keys %deps;

foreach my $target (@targets) {
  $deps{$target} = [ remove_dups($deps{$target}) ];
}

my %circular_deps = ( );

foreach my $target (@targets) {
  my $depth = check_circular_dependency(\%deps, $target);
  my $deplist = $deps{$target};
  if (defined $depth) {
    prints($target.': '.join(' ', @$deplist).NL);
  } else {
    $circular_deps{$target}++;
  }
  # prints('[ '.((defined $depth) ? padstring($depth, 8) : 'circular').' ] '. $target.': '.join(' ', @$deplist).NL);
}

if (sizeof(%circular_deps) > 0) {
  prints('.circular-deps: '.join(' ', (sort keys %circular_deps)).NL);
}


#while (my ($target, $deplist) = each %deps) {
#  prints($target.': '.join(' ', @$deplist).NL);
#}

exit 0;
